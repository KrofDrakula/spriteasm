{"name":"Spriteasm","body":"Spriteasm\r\n=========\r\n\r\nAnimation sprite generation made easy.\r\n\r\nOn mobile devices, animating anything beyong manipulating transforms and\r\nopacity is usually limited to using GIF animations and elaborate use of\r\nthe canvas element. Both of these have their drawbacks – they're prohibitively\r\nexpensive CPU-bound operations. HTML5 inline video is supported on some devices,\r\nbut also suffers glitches, inconsistencies and rendering artifacts which break\r\nexperiences. Also, video doesn't support alpha transparency and you'd be\r\nhard-pressed to create animated overlays.\r\n\r\nEnter sprite sheet animation.\r\n\r\nWhile this tool does not provide any JS implementations for said process, it\r\ndoes ease the problem of generating sprite sheets out of individual frames into\r\ncombined sprite sheets, split into 1024×1024 chunks (maximum allowed image size\r\nbefore downsampling occurs).\r\n\r\nThe frames themselves are arranged left-to-right, top-to-bottom, in that order.\r\n\r\nThis tool uses the node implementation of `canvas` to generate PNG sprite sheets.\r\nIt also respects transparency of the original frames in the output.\r\n\r\nIt does not convert or optimize the final sprite sheets, so use whatever favourite\r\ntools you have at your disposal to transcode the final images.\r\n\r\nOptionally, the script can generate a JSON object containing the file names mapped\r\nto a data URI for each of the encoded files by using the `--json` option when\r\ninvoking the command.\r\n\r\n\r\nSprite animation performance on WebKit\r\n--------------------------------------\r\n\r\nBefore implementing web sprite sheet animations, you might consider reading [this\r\narticle](http://gist.io/3639830). It covers mobile and desktop sprite animation\r\nperformance which you should be aware of before planning use of such graphics.\r\n\r\n\r\nUsage\r\n-----\r\n\r\n    spriteasm *.png -o output-dir [options]\r\n\r\nThe tool assumes all frames are of the same size and measures the size of the\r\nfirst frame matched by the glob pattern.\r\n\r\nRun `spriteasm` without arguments to see the list of available options.\r\n\r\n\r\nPerformance\r\n-----------\r\n\r\nI've timed the performance on a sample set of 2,232 PNG frames (320×180), totalling\r\n154 MB. I ran the test on a VirtualBox instance of Ubuntu 32-bit on an\r\nEliteBook 8540p.\r\n\r\nThe results:\r\n\r\n149 sprite sheets (960×900): 96 MB\r\n\r\n    real    0m56.409s\r\n    user    0m55.996s\r\n    sys     0m2.248s","google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"Animation sprite generator utility for web animations"}